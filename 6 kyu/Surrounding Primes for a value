// We need a function prime_bef_aft() that gives the largest prime below a certain given value n,

// befPrime or bef_prime (depending on the language),

// and the smallest prime larger than this value,

// aftPrime/aft_prime (depending on the language).

// The result should be output in a list like the following:

// primeBefAft == [befPrime, aftPrime]
// If n is a prime number it will give two primes, n will not be included in the result.

function primeBefAft(num) {
  let before = 0
  let after = 0
  for (let i = num - 1; i > 1; i--) {
    let prime = true
    for (let j = 2; j < i; j++) {
      if (i % j === 0) {
        prime = false
        break
      }
    }
    if (prime) {
      before = i
      break
    }
  }
  for (let i = num + 1; i < 99999999; i ++) {
    let prime = true
    for (let j = 2; j < i; j++) {
      if (i % j === 0) {
        prime = false
        break
      }
    }
    if (prime) {
      after = i
      break
    }
  }
  return [before, after]
}
